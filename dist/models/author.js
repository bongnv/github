"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nullAuthor = exports.default = exports.NO_REPLY_GITHUB_EMAIL = void 0;
const NEW = Symbol('new');
const NO_REPLY_GITHUB_EMAIL = 'noreply@github.com';
exports.NO_REPLY_GITHUB_EMAIL = NO_REPLY_GITHUB_EMAIL;

class Author {
  constructor(email, fullName, login = null, isNew = null, avatarUrl = null) {
    if (avatarUrl == null) {
      const match = (email || '').match(/^(\d+)\+[^@]+@users.noreply.github.com$/);

      if (match) {
        avatarUrl = 'https://avatars.githubusercontent.com/u/' + match[1] + '?s=32';
      } else if (email && email !== '') {
        avatarUrl = 'https://avatars.githubusercontent.com/u/e?email=' + encodeURIComponent(email) + '&s=32';
      } else {
        avatarUrl = '';
      }
    }

    this.email = email;
    this.fullName = fullName;
    this.login = login;
    this.new = isNew === NEW;
    this.avatarUrl = avatarUrl;
  }

  static createNew(email, fullName) {
    return new this(email, fullName, null, NEW);
  }

  getEmail() {
    return this.email;
  }

  getAvatarUrl() {
    return this.avatarUrl;
  }

  getFullName() {
    return this.fullName;
  }

  getLogin() {
    return this.login;
  }

  isNoReply() {
    return this.email === NO_REPLY_GITHUB_EMAIL;
  }

  hasLogin() {
    return this.login !== null;
  }

  isNew() {
    return this.new;
  }

  isPresent() {
    return true;
  }

  matches(other) {
    return this.getEmail() === other.getEmail();
  }

  toString() {
    let s = `${this.fullName} <${this.email}>`;

    if (this.hasLogin()) {
      s += ` @${this.login}`;
    }

    return s;
  }

  static compare(a, b) {
    if (a.getFullName() < b.getFullName()) {
      return -1;
    }

    if (a.getFullName() > b.getFullName()) {
      return 1;
    }

    return 0;
  }

}

exports.default = Author;
const nullAuthor = {
  getEmail() {
    return '';
  },

  getAvatarUrl() {
    return '';
  },

  getFullName() {
    return '';
  },

  getLogin() {
    return null;
  },

  isNoReply() {
    return false;
  },

  hasLogin() {
    return false;
  },

  isNew() {
    return false;
  },

  isPresent() {
    return false;
  },

  matches(other) {
    return other === this;
  },

  toString() {
    return 'null author';
  }

};
exports.nullAuthor = nullAuthor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9tb2RlbHMvYXV0aG9yLmpzIl0sIm5hbWVzIjpbIk5FVyIsIlN5bWJvbCIsIk5PX1JFUExZX0dJVEhVQl9FTUFJTCIsIkF1dGhvciIsImNvbnN0cnVjdG9yIiwiZW1haWwiLCJmdWxsTmFtZSIsImxvZ2luIiwiaXNOZXciLCJhdmF0YXJVcmwiLCJtYXRjaCIsImVuY29kZVVSSUNvbXBvbmVudCIsIm5ldyIsImNyZWF0ZU5ldyIsImdldEVtYWlsIiwiZ2V0QXZhdGFyVXJsIiwiZ2V0RnVsbE5hbWUiLCJnZXRMb2dpbiIsImlzTm9SZXBseSIsImhhc0xvZ2luIiwiaXNQcmVzZW50IiwibWF0Y2hlcyIsIm90aGVyIiwidG9TdHJpbmciLCJzIiwiY29tcGFyZSIsImEiLCJiIiwibnVsbEF1dGhvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsTUFBTUEsR0FBRyxHQUFHQyxNQUFNLENBQUMsS0FBRCxDQUFsQjtBQUVPLE1BQU1DLHFCQUFxQixHQUFHLG9CQUE5Qjs7O0FBRVEsTUFBTUMsTUFBTixDQUFhO0FBQzFCQyxFQUFBQSxXQUFXLENBQUNDLEtBQUQsRUFBUUMsUUFBUixFQUFrQkMsS0FBSyxHQUFHLElBQTFCLEVBQWdDQyxLQUFLLEdBQUcsSUFBeEMsRUFBOENDLFNBQVMsR0FBRyxJQUExRCxFQUFnRTtBQUN6RSxRQUFJQSxTQUFTLElBQUksSUFBakIsRUFBdUI7QUFDckIsWUFBTUMsS0FBSyxHQUFHLENBQUNMLEtBQUssSUFBSSxFQUFWLEVBQWNLLEtBQWQsQ0FBb0IseUNBQXBCLENBQWQ7O0FBRUEsVUFBSUEsS0FBSixFQUFXO0FBQ1RELFFBQUFBLFNBQVMsR0FBRyw2Q0FBNkNDLEtBQUssQ0FBQyxDQUFELENBQWxELEdBQXdELE9BQXBFO0FBQ0QsT0FGRCxNQUVPLElBQUlMLEtBQUssSUFBSUEsS0FBSyxLQUFLLEVBQXZCLEVBQTJCO0FBQ2hDSSxRQUFBQSxTQUFTLEdBQUcscURBQXFERSxrQkFBa0IsQ0FBQ04sS0FBRCxDQUF2RSxH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eEJDLEVBQUFBLFFBQVEsR0FBRztBQUNULFdBQU8sYUFBUDtBQUNEOztBQXZDdUIsQ0FBbkIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBORVcgPSBTeW1ib2woJ25ldycpO1xuXG5leHBvcnQgY29uc3QgTk9fUkVQTFlfR0lUSFVCX0VNQUlMID0gJ25vcmVwbHlAZ2l0aHViLmNvbSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEF1dGhvciB7XG4gIGNvbnN0cnVjdG9yKGVtYWlsLCBmdWxsTmFtZSwgbG9naW4gPSBudWxsLCBpc05ldyA9IG51bGwsIGF2YXRhclVybCA9IG51bGwpIHtcbiAgICBpZiAoYXZhdGFyVXJsID09IG51bGwpIHtcbiAgICAgIGNvbnN0IG1hdGNoID0gKGVtYWlsIHx8ICcnKS5tYXRjaCgvXihcXGQrKVxcK1teQF0rQHVzZXJzLm5vcmVwbHkuZ2l0aHViLmNvbSQvKTtcblxuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIGF2YXRhclVybCA9ICdodHRwczovL2F2YXRhcnMuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3UvJyArIG1hdGNoWzFdICsgJz9zPTMyJztcbiAgICAgIH0gZWxzZSBpZiAoZW1haWwgJiYgZW1haWwgIT09ICcnKSB7XG4gICAgICAgIGF2YXRhclVybCA9ICdodHRwczovL2F2YXRhcnMuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3UvZT9lbWFpbD0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGVtYWlsKSArICcmcz0zMic7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhdmF0YXJVcmwgPSAnJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmVtYWlsID0gZW1haWw7XG4gICAgdGhpcy5mdWxsTmFtZSA9IGZ1bGxOYW1lO1xuICAgIHRoaXMubG9naW4gPSBsb2dpbjtcbiAgICB0aGlzLm5ldyA9IGlzTmV3ID09PSBORVc7XG4gICAgdGhpcy5hdmF0YXJVcmwgPSBhdmF0YXJVcmw7XG4gIH1cblxuICBzdGF0aWMgY3JlYXRlTmV3KGVtYWlsLCBmdWxsTmFtZSkge1xuICAgIHJldHVybiBuZXcgdGhpcyhlbWFpbCwgZnVsbE5hbWUsIG51bGwsIE5FVyk7XG4gIH1cblxuICBnZXRFbWFpbCgpIHtcbiAgICByZXR1cm4gdGhpcy5lbWFpbDtcbiAgfVxuXG4gIGdldEF2YXRhclVybCgpIHtcbiAgICByZXR1cm4gdGhpcy5hdmF0YXJVcmw7XG4gIH1cblxuICBnZXRGdWxsTmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5mdWxsTmFtZTtcbiAgfVxuXG4gIGdldExvZ2luKCkge1xuICAgIHJldHVybiB0aGlzLmxvZ2luO1xuICB9XG5cbiAgaXNOb1JlcGx5KCkge1xuICAgIHJldHVybiB0aGlzLmVtYWlsID09PSBOT19SRVBMWV9HSVRIVUJfRU1BSUw7XG4gIH1cblxuICBoYXNMb2dpbigpIHtcbiAgICByZXR1cm4gdGhpcy5sb2dpbiAhPT0gbnVsbDtcbiAgfVxuXG4gIGlzTmV3KCkge1xuICAgIHJldHVybiB0aGlzLm5ldztcbiAgfVxuXG4gIGlzUHJlc2VudCgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIG1hdGNoZXMob3RoZXIpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRFbWFpbCgpID09PSBvdGhlci5nZXRFbWFpbCgpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgbGV0IHMgPSBgJHt0aGlzLmZ1bGxOYW1lfSA8JHt0aGlzLmVtYWlsfT5gO1xuICAgIGlmICh0aGlzLmhhc0xvZ2luKCkpIHtcbiAgICAgIHMgKz0gYCBAJHt0aGlzLmxvZ2lufWA7XG4gICAgfVxuICAgIHJldHVybiBzO1xuICB9XG5cbiAgc3RhdGljIGNvbXBhcmUoYSwgYikge1xuICAgIGlmIChhLmdldEZ1bGxOYW1lKCkgPCBiLmdldEZ1bGxOYW1lKCkpIHsgcmV0dXJuIC0xOyB9XG4gICAgaWYgKGEuZ2V0RnVsbE5hbWUoKSA+IGIuZ2V0RnVsbE5hbWUoKSkgeyByZXR1cm4gMTsgfVxuICAgIHJldHVybiAwO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBudWxsQXV0aG9yID0ge1xuICBnZXRFbWFpbCgpIHtcbiAgICByZXR1cm4gJyc7XG4gIH0sXG5cbiAgZ2V0QXZhdGFyVXJsKCkge1xuICAgIHJldHVybiAnJztcbiAgfSxcblxuICBnZXRGdWxsTmFtZSgpIHtcbiAgICByZXR1cm4gJyc7XG4gIH0sXG5cbiAgZ2V0TG9naW4oKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG5cbiAgaXNOb1JlcGx5KCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcblxuICBoYXNMb2dpbigpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG5cbiAgaXNOZXcoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIGlzUHJlc2VudCgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG5cbiAgbWF0Y2hlcyhvdGhlcikge1xuICAgIHJldHVybiBvdGhlciA9PT0gdGhpcztcbiAgfSxcblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJ251bGwgYXV0aG9yJztcbiAgfSxcbn07XG4iXX0=