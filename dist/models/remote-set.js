"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _remote = require("./remote");

var _helpers = require("../helpers");

class RemoteSet {
  constructor(iterable = []) {
    this.byName = new Map();
    this.byDotcomRepo = new Map();
    this.protocolCount = new Map();

    for (const remote of iterable) {
      this.add(remote);
    }
  }

  add(remote) {
    this.byName.set(remote.getName(), remote);

    if (remote.isGithubRepo()) {
      (0, _helpers.pushAtKey)(this.byDotcomRepo, remote.getSlug(), remote);
    }

    if (remote.getProtocol()) {
      const count = this.protocolCount.get(remote.getProtocol()) || 0;
      this.protocolCount.set(remote.getProtocol(), count + 1);
    }
  }

  isEmpty() {
    return this.byName.size === 0;
  }

  size() {
    return this.byName.size;
  }

  withName(name) {
    return this.byName.get(name) || _remote.nullRemote;
  }

  [Symbol.iterator]() {
    return this.byName.values();
  }

  filter(predicate) {
    return new this.constructor(Array.from(this).filter(predicate));
  }

  matchingGitHubRepository(owner, name) {
    return this.byDotcomRepo.get(`${owner}/${name}`) || [];
  }

  mostUsedProtocol(choices) {
    let best = choices[0];
    let bestCount = 0;

    for (const protocol of choices) {
      const count = this.protocolCount.get(protocol) || 0;

      if (count > bestCount) {
        bestCount = count;
        best = protocol;
      }
    }

    return best;
  }

}

exports.default = RemoteSet;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9tb2RlbHMvcmVtb3RlLXNldC5qcyJdLCJuYW1lcyI6WyJSZW1vdGVTZXQiLCJjb25zdHJ1Y3RvciIsIml0ZXJhYmxlIiwiYnlOYW1lIiwiTWFwIiwiYnlEb3Rjb21SZXBvIiwicHJvdG9jb2xDb3VudCIsInJlbW90ZSIsImFkZCIsInNldCIsImdldE5hbWUiLCJpc0dpdGh1YlJlcG8iLCJnZXRTbHVnIiwiZ2V0UHJvdG9jb2wiLCJjb3VudCIsImdldCIsImlzRW1wdHkiLCJzaXplIiwid2l0aE5hbWUiLCJuYW1lIiwibnVsbFJlbW90ZSIsIlN5bWJvbCIsIml0ZXJhdG9yIiwidmFsdWVzIiwiZmlsdGVyIiwicHJlZGljYXRlIiwiQXJyYXkiLCJmcm9tIiwibWF0Y2hpbmdHaXRIdWJSZXBvc2l0b3J5Iiwib3duZXIiLCJtb3N0VXNlZFByb3RvY29sIiwiY2hvaWNlcyIsImJlc3QiLCJiZXN0Q291bnQiLCJwcm90b2NvbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUVlLE1BQU1BLFNBQU4sQ0FBZ0I7QUFDN0JDLEVBQUFBLFdBQVcsQ0FBQ0MsUUFBUSxHQUFHLEVBQVosRUFBZ0I7QUFDekIsU0FBS0MsTUFBTCxHQUFjLElBQUlDLEdBQUosRUFBZDtBQUNBLFNBQUtDLFlBQUwsR0FBb0IsSUFBSUQsR0FBSixFQUFwQjtBQUNBLFNBQUtFLGFBQUwsR0FBcUIsSUFBSUYsR0FBSixFQUFyQjs7QUFDQSxTQUFLLE1BQU1HLE1BQVgsSUFBcUJMLFFBQXJCLEVBQStCO0FBQzdCLFdBQUtNLEdBQUwsQ0FBU0QsTUFBVDtBQUNEO0FBQ0Y7O0FBRURDLEVBQUFBLEdBQUcsQ0FBQ0QsTUFBRCxFQUFTO0FBQ1YsU0FBS0osTUFBTCxDQUFZTSxHQUFaLENBQWdCRixNQUFNLENBQUNHLE9BQVAsRUFBaEIsRUFBa0NILE1BQWxDOztBQUNBLFFBQUlBLE1BQU0sQ0FBQ0ksWUFBUCxFQUFKLEVBQTJCO0FBQ3pCLDhCQUFVLEtBQUtOLFlBQWYsRUFBNkJFLE1BQU0sQ0FBQ0ssT0FBUCxFQUE3QixFQUErQ0wsTUFBL0M7QUFDRDs7QUFDRCxRQUFJQSxNQUFNLENBQUNNLFdBQVAsRUFBSixFQUEwQjtBQUN4QixZQUFNQyxLQUFLLEdBQUcsS0FBS1IsYUFBTCxDQUFtQlMsR0FBbkIsQ0FBdUJSLE1BQU0sQ0FBQ00sV0FBUCxFQUF2QixLQUFnRCxDQUE5RDtBQUNBLFdBQUtQLGFBQUwsQ0FBbUJHLEdBQW5CLENBQXVCRixNQUFNLENBQUNNLFdBQVAsRUFBdkIsRUFBNkNDLEtBQUssR0FBRyxDQUFyRDtBQUNEO0FBQ0Y7O0FBRURFLEVBQUFBLE9BQU8sR0FBRztBQUNSLFdBQU8sS0FBS2IsTUFBTCxDQUFZYyxJQUFaLEtBQXFCLENBQTVCO0FBQ0Q7O0FBRURBLEVBQUFBLElBQUksR0FBRztBQUNMLFdBQU8sS0FBS2QsTUFBTCxDQUFZYyxJQUFuQjtBQUNEOztBQUVEQyxFQUFBQSxRQUFRLENBQUNDLElBQUQsRUFBTztBQUNiLFdBQU8sS0FBS2hCLE1BQUwsQ0FBWVksR0FBWixDQUFnQkksSUFBaEIsS0FBeUJDLGtCQUFoQztBQUNEOztBQUVELEdBQUNDLE1BQU0sQ0FBQ0MsUUFBUixJQUFvQjtBQUNsQixXQUFPLEtBQUtuQixNQUFMLENBQVlvQixNQUFaLEVBQVA7QUFDRDs7QUFFREMsRUFBQUEsTUFBTSxDQUFDQyxTQUFELEVBQVk7QUFDaEIsV0FBTyxJQUFJLEtBQUt4QixXQUFULENBQ0x5QixLQUFLLENBQUNDLElBQU4sQ0FBVyxJQUFYLEVBQWlCSCxNQUFqQixDQUF3QkMsU0FBeEIsQ0FESyxDQUFQO0FBR0Q7O0FBRURHLEVBQUFBLHdCQUF3QixDQUFDQyxLQUFELEVBQVFWLElBQVIsRUFBYztBQUNwQyxXQUFPLEtBQUtkLFlBQUwsQ0FBa0JVLEdBQWxCLENBQXVCLEdBQUVjLEtBQU0sSUFBR1YsSUFBSyxFQUF2QyxLQUE2QyxFQUFwRDtBQUNEOztBQUVEVyxFQUFBQSxnQkFBZ0IsQ0FBQ0MsT0FBRCxFQUFVO0FBQ3hCLFFBQUlDLElBQUksR0FBR0QsT0FBTyxDQUFDLENBQUQsQ0FBbEI7QUFDQSxRQUFJRSxTQUFTLEdBQUcsQ0FBaEI7O0FBQ0EsU0FBSyxNQUFNQyxRQUFYLElBQXVCSCxPQUF2QixFQUFnQztBQUM5QixZQUFNakIsS0FBSyxHQUFHLEtBQUtSLGFBQUwsQ0FBbUJTLEdBQW5CLENBQXVCbUIsUUFBdkIsS0FBb0MsQ0FBbEQ7O0FBQ0EsVUFBSXBCLEtBQUssR0FBR21CLFNBQVosRUFBdUI7QUFDckJBLFFBQUFBLFNBQVMsR0FBR25CLEtBQVo7QUFDQWtCLFFBQUFBLElBQUksR0FBR0UsUUFBUDtBQUNEO0FBQ0Y7O0FBQ0QsV0FBT0YsSUFBUDtBQUNEOztBQTFENEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge251bGxSZW1vdGV9IGZyb20gJy4vcmVtb3RlJztcbmltcG9ydCB7cHVzaEF0S2V5fSBmcm9tICcuLi9oZWxwZXJzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVtb3RlU2V0IHtcbiAgY29uc3RydWN0b3IoaXRlcmFibGUgPSBbXSkge1xuICAgIHRoaXMuYnlOYW1lID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuYnlEb3Rjb21SZXBvID0gbmV3IE1hcCgpO1xuICAgIHRoaXMucHJvdG9jb2xDb3VudCA9IG5ldyBNYXAoKTtcbiAgICBmb3IgKGNvbnN0IHJlbW90ZSBvZiBpdGVyYWJsZSkge1xuICAgICAgdGhpcy5hZGQocmVtb3RlKTtcbiAgICB9XG4gIH1cblxuICBhZGQocmVtb3RlKSB7XG4gICAgdGhpcy5ieU5hbWUuc2V0KHJlbW90ZS5nZXROYW1lKCksIHJlbW90ZSk7XG4gICAgaWYgKHJlbW90ZS5pc0dpdGh1YlJlcG8oKSkge1xuICAgICAgcHVzaEF0S2V5KHRoaXMuYnlEb3Rjb21SZXBvLCByZW1vdGUuZ2V0U2x1ZygpLCByZW1vdGUpO1xuICAgIH1cbiAgICBpZiAocmVtb3RlLmdldFByb3RvY29sKCkpIHtcbiAgICAgIGNvbnN0IGNvdW50ID0gdGhpcy5wcm90b2NvbENvdW50LmdldChyZW1vdGUuZ2V0UHJvdG9jb2woKSkgfHwgMDtcbiAgICAgIHRoaXMucHJvdG9jb2xDb3VudC5zZXQocmVtb3RlLmdldFByb3RvY29sKCksIGNvdW50ICsgMSk7XG4gICAgfVxuICB9XG5cbiAgaXNFbXB0eSgpIHtcbiAgICByZXR1cm4gdGhpcy5ieU5hbWUuc2l6ZSA9PT0gMDtcbiAgfVxuXG4gIHNpemUoKSB7XG4gICAgcmV0dXJuIHRoaXMuYnlOYW1lLnNpemU7XG4gIH1cblxuICB3aXRoTmFtZShuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuYnlOYW1lLmdldChuYW1lKSB8fCBudWxsUmVtb3RlO1xuICB9XG5cbiAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgcmV0dXJuIHRoaXMuYnlOYW1lLnZhbHVlcygpO1xuICB9XG5cbiAgZmlsdGVyKHByZWRpY2F0ZSkge1xuICAgIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcihcbiAgICAgIEFycmF5LmZyb20odGhpcykuZmlsdGVyKHByZWRpY2F0ZSksXG4gICAgKTtcbiAgfVxuXG4gIG1hdGNoaW5nR2l0SHViUmVwb3NpdG9yeShvd25lciwgbmFtZSkge1xuICAgIHJldHVybiB0aGlzLmJ5RG90Y29tUmVwby5nZXQoYCR7b3duZXJ9LyR7bmFtZX1gKSB8fCBbXTtcbiAgfVxuXG4gIG1vc3RVc2VkUHJvdG9jb2woY2hvaWNlcykge1xuICAgIGxldCBiZXN0ID0gY2hvaWNlc1swXTtcbiAgICBsZXQgYmVzdENvdW50ID0gMDtcbiAgICBmb3IgKGNvbnN0IHByb3RvY29sIG9mIGNob2ljZXMpIHtcbiAgICAgIGNvbnN0IGNvdW50ID0gdGhpcy5wcm90b2NvbENvdW50LmdldChwcm90b2NvbCkgfHwgMDtcbiAgICAgIGlmIChjb3VudCA+IGJlc3RDb3VudCkge1xuICAgICAgICBiZXN0Q291bnQgPSBjb3VudDtcbiAgICAgICAgYmVzdCA9IHByb3RvY29sO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYmVzdDtcbiAgfVxufVxuIl19